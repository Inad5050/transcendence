services:
  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "8000:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - default
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
      # game:
      #   condition: service_healthy

  backend:
    build: ./backend
    container_name: backend
    volumes:
      - ./backend:/app # crea un vínculo en tiempo real entre el directorio ./backend de su máquina local y el directorio /app dentro del contenedor -> para usar la directiva --watch
      - /app/node_modules # excluye la carpeta /node_modules de reemplazar la carpeta del mismo nombre dentro del contenedor. Para que use el directorio que ya se ha generado dentro del contenedor -> Las dependencias del contenedor y de la maquina host no son los mismos
    expose:
      - "9000"
    environment:
      - APP_KEY=${APP_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"] # curl -f (o --fail) hace que curl devuelva un código de salida distinto de cero si el servidor responde con un error HTTP (4xx o 5xx)
      interval: 30s
      timeout: 10s
      retries: 1
      start_period: 30s
    networks:
      - default

  frontend:
      build: ./frontend
      container_name: frontend
      volumes:
        - ./frontend:/app
        - /app/node_modules
      expose:
        - "3000"
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3000"]
        interval: 30s
        timeout: 10s
        retries: 1
        start_period: 30s
      networks:
        - default

  # game:
  #   build: ./game
  #   container_name: game
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   ports:
  #     - "5000:5000"
  #   networks:
  #     - default

networks:
  default:
    name: net-transcendence
    driver: bridge
